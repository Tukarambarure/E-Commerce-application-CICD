name: Infrastructure Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'kubernetes/namespace.yaml'
      - 'kubernetes/configmaps.yaml'
      - 'kubernetes/secrets.yaml'
      - 'kubernetes/database.yaml'
      - 'kubernetes/redis.yaml'
      - 'kubernetes/monitoring.yaml'
      - 'kubernetes/network-policy.yaml'
  workflow_dispatch:

env:
  NAMESPACE: stylehub

jobs:
  # Security Scanning
  security-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'kubernetes/'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy Infrastructure
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [security-scan]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Deploy namespace and configs
        run: |
          kubectl apply -f kubernetes/namespace.yaml
          kubectl apply -f kubernetes/configmaps.yaml
          kubectl apply -f kubernetes/secrets.yaml

      - name: Deploy database
        run: |
          kubectl apply -f kubernetes/database.yaml
          kubectl wait --for=condition=ready pod -l app=postgres -n $NAMESPACE --timeout=300s

      - name: Deploy redis
        run: |
          kubectl apply -f kubernetes/redis.yaml
          kubectl wait --for=condition=ready pod -l app=redis -n $NAMESPACE --timeout=300s

      - name: Deploy monitoring
        run: |
          kubectl apply -f kubernetes/monitoring.yaml

      - name: Deploy network policies
        run: |
          kubectl apply -f kubernetes/network-policy.yaml

      - name: Verify infrastructure
        run: |
          echo "Checking infrastructure status..."
          kubectl get pods -n $NAMESPACE
          kubectl get services -n $NAMESPACE
          kubectl get pvc -n $NAMESPACE

  # Notify
  notify:
    name: Notify Infrastructure Deployment
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: always()
    steps:
      - name: Notify Slack on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '✅ Infrastructure deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ Infrastructure deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
