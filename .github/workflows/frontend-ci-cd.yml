name: Frontend UI CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package.json'
      - 'package-lock.json'
      - 'vite.config.ts'
      - 'tailwind.config.ts'
      - 'tsconfig.json'
      - 'Dockerfile'
      - 'kubernetes/ui/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package.json'
      - 'package-lock.json'
      - 'vite.config.ts'
      - 'tailwind.config.ts'
      - 'tsconfig.json'
      - 'Dockerfile'
      - 'kubernetes/ui/**'

env:
  SERVICE_NAME: stylehub-ui
  DOCKER_REGISTRY: docker.io
  IMAGE_TAG: ${{ github.sha }}

jobs:
  # Code Quality Analysis
  code-quality:
    name: Frontend Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type checking
        run: npx tsc --noEmit

      - name: Run Prettier check
        run: npm run format:check

      - name: Setup SonarQube Scanner
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          scannerHome: ${{ github.workspace }}/sonar-scanner
          args: >
            -Dsonar.projectKey=stylehub-frontend
            -Dsonar.sources=src
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.testExecutionReportPaths=test-report.xml

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Test
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test -- --coverage --watchAll=false

      - name: Build application
        run: npm run build

      - name: Build Docker image
        run: |
          docker build -t $DOCKER_REGISTRY/${{ secrets.DOCKER_USERNAME }}/$SERVICE_NAME:$IMAGE_TAG .
          docker build -t $DOCKER_REGISTRY/${{ secrets.DOCKER_USERNAME }}/$SERVICE_NAME:latest .

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '$DOCKER_REGISTRY/${{ secrets.DOCKER_USERNAME }}/$SERVICE_NAME:$IMAGE_TAG'
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-image-results.sarif'

  # Deploy to EKS
  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: [build-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker push $DOCKER_REGISTRY/${{ secrets.DOCKER_USERNAME }}/$SERVICE_NAME:$IMAGE_TAG
          docker push $DOCKER_REGISTRY/${{ secrets.DOCKER_USERNAME }}/$SERVICE_NAME:latest

      - name: Update image tag in kustomization
        run: |
          sed -i "s/newTag: \${IMAGE_TAG}/newTag: $IMAGE_TAG/g" kubernetes/kustomization.yaml
          sed -i "s/\${DOCKER_USERNAME}/${{ secrets.DOCKER_USERNAME }}/g" kubernetes/kustomization.yaml

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -k kubernetes/ui/
          kubectl rollout status deployment/$SERVICE_NAME -n stylehub --timeout=300s

      - name: Health check
        run: |
          kubectl wait --for=condition=ready pod -l app=$SERVICE_NAME -n stylehub --timeout=300s
          kubectl get pods -n stylehub -l app=$SERVICE_NAME

  # Notify
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Notify Slack on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '✅ Frontend UI deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ Frontend UI deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
